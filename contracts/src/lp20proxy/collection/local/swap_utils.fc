
cell create_swap_payload(slice router_wallet, slice adi_payload) impure inline {
    cell payload = 
        begin_cell()
            .store_uint(opr::dex::swap)
            .store_slice(router_wallet)
            .store_coins(0)
            .store_slice(my_address())
            .store_uint(1, 1)
            .store_uint(0, 1)
            .store_slice(adi_payload)
        .end_cell();
    return payload;
}

cell create_swap_message(int qID, int jetton_amount, int fwd_amount, cell swap_payload, int ton_amount) impure inline {
    cell message = 
        begin_cell()
            .store_uint(0x18, 6)
            .store_slice(stg::collection_addr) 
            .store_coins(ton_amount) 
            .store_uint(0, 107)
            
            .store_uint(opr::basic::transfer, 32)
            .store_uint(qID, 64)
            .store_coins(jetton_amount)
            .store_slice(stg::stonfi_router_addr)
            .store_uint(0, 2)
            .store_uint(0, 1)
            .store_coins(fwd_amount)
            .store_uint(1, 1)
            .store_ref(swap_payload)
        .end_cell();

    return message;
}

() must_swap(slice user_addr, int swap_amount) impure inline {

    int flow_label = 0x222;

    cell router_walletB = calculate_user_jetton_wallet_address(stg::stonfi_router_addr, stg::tokenb_master, stg::tokenB_wallet_code);

    cell addi_payload =
        begin_cell()
            .store_uint(flow_label, 32)
            .store_slice(user_addr)
        .end_cell();

    cell swap_payload = create_swap_payload(router_walletB, addi_payload);

    ;; 0.175 TON as forward jetton amount
    cell swap_message = create_swap_message(ctx::qryID, swap_amount, 175000000, swap_payload, 220000000);

    send_raw_message(swap_message, 1);
}