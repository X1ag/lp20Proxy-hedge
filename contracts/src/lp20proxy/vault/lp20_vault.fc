
#include "../../../includes/stdlib.fc";
#include "../../../includes/common/context.fc";
#include "../../../includes/common/errors.fc";

#include "local/storage.fc";
#include "local/op_codes.fc";

#include "../../../includes/common/proxy_acc_utils.fc";

const int flow::ask_lp = 0x333;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {        
        return ();
    }

    ctx::send_addr = cs~load_msg_addr();

    (ctx::opr, ctx::qryID) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if (ctx::opr == opr::ext_deployment) {
        stg::my_lp_jetton_wallet = in_msg_body~load_msg_addr();
        stg::init? = 1;
        set_stg();
        return ();
    }

    load_stg();

    if equal_slices(ctx::send_addr, stg::collection_addr) {
        if ctx::opr == opr::give_me_lp_pls {

            int how_many = in_msg_body~load_coins();
            slice user_address = in_msg_body~load_msg_addr();
            throw_unless(941, how_many <= stg::lp_token_balance);

            int amountA = 50000000; ;; 0.05 TON
            int amountB = 1;

            cell message =
                begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(stg::my_lp_jetton_wallet) 
                    .store_coins(amountA) 
                    .store_uint(0, 107)

                    .store_uint(opr::basic::transfer, 32)
                    .store_uint(ctx::qryID, 64)
                    .store_coins(how_many)
                    .store_slice(stg::collection_addr)
                    .store_uint(0, 2)
                    .store_uint(0, 1)
                    .store_coins(0)
                    .store_uint(0, 1)
                    ;; .store_coins(10000000) ;; 0.01 TON
                    ;; .store_uint(1, 1)
                    ;; .store_ref(
                    ;;     begin_cell()
                    ;;         .store_uint(flow::ask_lp, 32)
                    ;;         .store_slice(user_address)
                    ;;         .store_coins(how_many)
                    ;;     .end_cell()
                    ;; )
                .end_cell();

            send_raw_message(message, 1);

            slice user_acc_address = calculate_user_proxy_account_address(user_address, stg::collection_addr, stg::user_proxy_acc_code, stg::pool_addr, my_address());
            cell acc_notify =
                begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(user_acc_address) 
                    .store_coins(amountB) 
                    .store_uint(0, 107)
                    .store_uint(opr::ask_lp, 32)
                    .store_uint(ctx::qryID, 64)
                .end_cell();

            send_raw_message(acc_notify, 1);

            stg::lp_token_balance -= how_many;
            set_stg();
            return ();
        }
    }

    if ctx::opr == opr::basic::jetton_notify {
        (int jetton_amount, slice from_user, int has_ref) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_uint(1));
        throw_unless(121, has_ref);

        slice ref_ds = in_msg_body~load_ref().begin_parse();
        int transferred_op = ref_ds~load_uint(32);

        if transferred_op == opr::give_me_lp_pls {
            stg::lp_token_balance += jetton_amount;
        }
        set_stg();
        return ();
    }

    throw(err::incr_opr);
}
