
#include "../../../includes/stdlib.fc";
#include "../../../includes/common/context.fc";
#include "../../../includes/common/errors.fc";

#include "local/storage.fc";
#include "local/op_codes.fc";

#include "../../../includes/common/proxy_acc_utils.fc";

const int flow::ask_lp = 0x333;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {        
        return ();
    }

    ctx::send_addr = cs~load_msg_addr();

    (ctx::opr, ctx::qryID) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if (ctx::opr == opr::ext_deployment) {
        stg::my_lp_jetton_wallet = in_msg_body~load_msg_addr();
        stg::init? = 1;
        set_stg();
        return ();
    }

    load_stg();

    if ctx::opr == opr::give_me_lp_pls {

        slice bodyref = in_msg_body~load_ref().begin_parse();

        int how_many = bodyref~load_coins();
        throw_unless(901, how_many <= stg::lp_token_balance);

        slice user_addr = bodyref~load_msg_addr();
        slice collection_addr = bodyref~load_msg_addr();
        cell user_instance_ref = bodyref~load_ref();


        slice user_proxy_acc_addr = calculate_user_proxy_account_address(user_addr, collection_addr, stg::user_proxy_acc_code, stg::pool_addr, my_address());
        throw_unless(941, equal_slices(user_proxy_acc_addr, ctx::send_addr));

        int amountB = 20000000; ;; 0.02 TON

        cell message =
            begin_cell()
                .store_uint(0x18, 6)
                .store_slice(stg::my_lp_jetton_wallet) 
                .store_coins(0) 
                .store_uint(0, 107)

                .store_uint(opr::basic::transfer, 32)
                .store_uint(ctx::qryID, 64)
                .store_coins(how_many)
                .store_slice(collection_addr)
                .store_uint(0, 2)
                .store_uint(0, 1)
                .store_coins(amountB) 
                .store_uint(1, 1)
                    .store_ref(
                        begin_cell()
                            .store_uint(opr::user_done, 32)
                            .store_ref(user_instance_ref)
                        .end_cell()
                    )
            .end_cell();

        send_raw_message(message, 64);

        stg::lp_token_balance -= how_many;
        set_stg();
        return ();
    }
    

    if ctx::opr == opr::basic::jetton_notify {
        (int jetton_amount, slice from_user, int has_ref) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_uint(1));
        throw_unless(121, has_ref);

        slice ref_ds = in_msg_body~load_ref().begin_parse();
        int transferred_op = ref_ds~load_uint(32);

        if transferred_op == opr::give_me_lp_pls {
            stg::lp_token_balance += jetton_amount;
        }
        set_stg();
        return ();
    }

    throw(err::incr_opr);
}
