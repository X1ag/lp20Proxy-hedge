
#include "../../../includes/stdlib.fc";
#include "../../../includes/common/context.fc";

#include "local/storage.fc";
#include "local/op_codes.fc";
#include "local/params.fc";

;;
;;  TON NFT Item Smart Contract
;;

{-

    NOTE that this tokens can be transferred within the same workchain.

    This is suitable for most tokens, if you need tokens transferable between workchains there are two solutions:

    1) use more expensive but universal function to calculate message forward fee for arbitrary destination (see `misc/forward-fee-calc.cs`)

    2) use token holder proxies in target workchain (that way even 'non-universal' token can be used from any workchain)

-}

const int ONE_YEAR_IN_SECONDS = 31622400; ;; 1 year in seconds = 60 * 60 * 24 * 366

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, slice in_msg_body, int fwd_fees) impure inline {
    throw_unless(401, equal_slices(ctx::send_addr, stg::owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();
    throw_unless(708, slice_bits(in_msg_body) >= 1);

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
        send_msg(new_owner_address, forward_amount, op::ownership_assigned(), ctx::qryID, begin_cell().store_slice(stg::owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
        force_chain(response_destination);
        send_msg(response_destination, rest_amount, op::excesses(), ctx::qryID, null(), 1); ;; paying fees, revert on errors
    }

    stg::owner_address = new_owner_address;
    set_stg();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    ctx::send_addr = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    load_stg();

    if (~ stg::init?) {
      throw_unless(405, equal_slices(stg::lp20proxy_collection_address, ctx::send_addr));
      stg::owner_address = in_msg_body~load_msg_addr();
      stg::content = in_msg_body~load_ref();
      stg::ins_jetton_wallet = in_msg_body~load_msg_addr();

      slice addi_cont = in_msg_body~load_ref().begin_parse();

      stg::pool_addr = addi_cont~load_msg_addr();
      stg::ins_amount = addi_cont~load_coins();
      stg::ins_jetton_master_addr = addi_cont~load_msg_addr();
      stg::ctx_price = addi_cont~load_coins();
      stg::initail_time = addi_cont~load_uint(64);

      set_stg();
      return ();
    }

    (ctx::opr, ctx::qryID) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if (ctx::opr == op::transfer()) {
      transfer_ownership(my_balance, in_msg_body, fwd_fee);
      return ();
    }
    if (ctx::opr == op::get_static_data()) {
      send_msg( ctx::send_addr, 0, op::report_static_data(), ctx::qryID, begin_cell().store_uint(stg::index, 256).store_slice(stg::lp20proxy_collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }

    if (ctx::opr == opr::get_ins) {
        throw_unless(121, stg::ins_amount > 0);
        throw_unless(122, (now() - stg::initail_time) < ONE_YEAR_IN_SECONDS);
        throw_unless(123, equal_slices(ctx::send_addr, stg::owner_address));
        cell message = 
            begin_cell()
                .store_uint(0x18, 6)
                .store_slice(stg::pool_addr) 
                .store_coins(0) 
                .store_uint(0, 107)
                
                .store_uint(opr::getter_expected_outputs, 32)
                .store_uint(ctx::qryID, 64)

                .store_coins(stg::ctx_price)
                .store_slice(stg::ins_jetton_master_addr)
            .end_cell();

        send_raw_message(message, 64);
        return ();
    }

    if (ctx::opr == opr::getter_expected_outputs) {
        throw_unless(124, equal_slices(ctx::send_addr, stg::pool_addr));
        int out = in_msg_body~load_coins();

        int difference = (stg::ctx_price * 20) / 100;
        if (out >= stg::ctx_price + difference) {
            cell message = 
                begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(stg::ins_jetton_wallet) 
                    .store_coins(0) 
                    .store_uint(0, 107)
                    
                    .store_uint(opr::basic::transfer, 32)
                    .store_uint(ctx::qryID, 64)

                    .store_coins(stg::ins_amount)
                    .store_slice(stg::owner_address)
                    .store_uint(0, 2)
                    .store_uint(0, 1)
                    .store_coins(0)
                    .store_uint(0, 1)
                .end_cell();
            send_raw_message(message, 64);

        } else {
            throw(225);
        }

        stg::ins_amount = 0;
        set_stg();
        return ();
    }

    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
  load_stg();
  return (stg::init?, stg::index, stg::lp20proxy_collection_address, stg::owner_address, stg::content);
}