
global slice stg::collection_addr;
global slice stg::user_addr;
global slice stg::pool_addr;
global slice stg::vault_addr;

global int stg::token_amountA;
global int stg::token_amountB;
global int stg::onchain_info_lp;

global int stg::swapped_amount;
global int stg::lp_tokens_amount;
global int stg::asked_lp_amount;

global int stg::flag_tokens;
global int stg::prov_flag_ask_lp;
global int stg::flag_swap;
global int stg::flag_ask_lp;
global int stg::flag_onchain_info;


() load_stg() impure inline {
    slice smc_stg = get_data().begin_parse();

    stg::user_addr = smc_stg~load_msg_addr();  
    stg::collection_addr = smc_stg~load_msg_addr();
    stg::pool_addr = smc_stg~load_msg_addr();

    slice coin_slice = smc_stg~load_ref().begin_parse();

    stg::token_amountA = coin_slice~load_coins();
    stg::token_amountB = coin_slice~load_coins();
    stg::swapped_amount = coin_slice~load_coins();
    stg::lp_tokens_amount = coin_slice~load_coins();
    stg::asked_lp_amount = coin_slice~load_coins();

    slice addi_slice = smc_stg~load_ref().begin_parse();
    stg::onchain_info_lp = addi_slice~load_coins();
    stg::vault_addr = addi_slice~load_msg_addr();

    stg::flag_tokens = smc_stg~load_uint(1);
    stg::prov_flag_ask_lp = smc_stg~load_uint(1);
    stg::flag_swap = smc_stg~load_uint(1);
    stg::flag_ask_lp = smc_stg~load_uint(1);
    stg::flag_onchain_info = smc_stg~load_uint(1);
}

() set_stg() impure inline {
    set_data(
        begin_cell()
            .store_slice(stg::user_addr)
            .store_slice(stg::collection_addr)
            .store_slice(stg::pool_addr) 
            .store_ref(
                begin_cell()
                    .store_coins(stg::token_amountA)
                    .store_coins(stg::token_amountB)
                    .store_coins(stg::swapped_amount)
                    .store_coins(stg::lp_tokens_amount)
                    .store_coins(stg::asked_lp_amount)
                .end_cell()
            )
            .store_ref(
                begin_cell()
                    .store_coins(stg::onchain_info_lp)
                    .store_slice(stg::vault_addr)
                .end_cell()
            )
            .store_uint(stg::flag_tokens, 1)
            .store_uint(stg::prov_flag_ask_lp, 1)
            .store_uint(stg::flag_swap, 1)
            .store_uint(stg::flag_ask_lp, 1)
            .store_uint(stg::flag_onchain_info, 1)
        .end_cell()
    );
}