#include "../../../includes/stdlib.fc";
#include "../../../includes/common/context.fc";
#include "../../../includes/common/errors.fc";

#include "local/storage.fc";
#include "local/op_codes.fc";

() chek_conds(int qID) impure inline {
    ;; if (stg::flag_tokens == 1) & (stg::prov_flag_ask_lp == 1) & (stg::flag_swap == 1) & (stg::flag_onchain_info == 1) & (stg::flag_ask_lp == 1) {
    ;;     cell message = 
    ;;         begin_cell()
    ;;             .store_uint(0x18, 6)
    ;;             .store_slice(stg::collection_addr) 
    ;;             .store_coins(0) 
    ;;             .store_uint(0, 107)
    ;;             .store_uint(opr::user_done, 32)
    ;;             .store_uint(qID, 64)

                ;; .store_ref(
                ;;     begin_cell()
                ;;         .store_slice(stg::user_addr)
                ;;         .store_coins(stg::token_amountA)
                ;;         .store_coins(stg::token_amountB)
                ;;         .store_coins(stg::swapped_amount)
                ;;         .store_coins(stg::lp_tokens_amount)
                ;;         .store_coins(stg::asked_lp_amount)
                ;;     .end_cell()
                ;; )
    ;;         .end_cell();


    ;; }

    if (stg::flag_tokens == 1) & (stg::prov_flag_ask_lp == 1) & (stg::flag_swap == 1) & (stg::flag_onchain_info == 1) {

        cell message = 
            begin_cell()
                .store_uint(0x18, 6)
                .store_slice(stg::vault_addr) 
                .store_coins(0) 
                .store_uint(0, 107)
                .store_uint(opr::give_me_lp_pls, 32)
                .store_uint(qID, 64)
                .store_ref(
                    begin_cell()
                        .store_coins(stg::onchain_info_lp)
                        .store_slice(stg::user_addr)
                        .store_slice(stg::collection_addr)
                        .store_ref(
                            begin_cell()
                                .store_slice(stg::user_addr)
                                .store_coins(stg::token_amountA)
                                .store_coins(stg::token_amountB)
                                .store_coins(stg::swapped_amount)
                                .store_coins(stg::lp_tokens_amount)
                                .store_coins(stg::onchain_info_lp)
                            .end_cell()
                        )
                    .end_cell()
                )
            .end_cell();

        stg::token_amountA = 0;
        stg::token_amountB = 0;
        send_raw_message(message, 128);
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    load_stg();

    if (flags & 1) {        
        return ();
    }

    ctx::send_addr = cs~load_msg_addr();

    (ctx::opr, ctx::qryID) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    load_stg();

    ;; messages from collection
    if equal_slices(ctx::send_addr, stg::collection_addr) {
        
        if ctx::opr == opr::add_token {

            (int amountA, int amountB) = (in_msg_body~load_coins(), in_msg_body~load_coins());

            stg::token_amountA += amountA;
            stg::token_amountB += amountB;

            if (stg::token_amountA) > 0 &  (stg::token_amountB > 0) {

                builder message =
                    begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(stg::collection_addr) 
                        .store_coins(0) 
                        .store_uint(0, 107)
                        .store_uint(opr::add_token_ok, 32)
                        .store_uint(ctx::qryID, 64)
                        .store_slice(stg::user_addr)
                        .store_coins(stg::token_amountA)
                        .store_coins(stg::token_amountB);

                send_raw_message(message.end_cell(), 64);

                stg::flag_tokens = -1;

            } else {
                builder gas_message =
                    begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(stg::collection_addr) 
                        .store_coins(0) 
                        .store_uint(0, 107)
                        .store_uint(opr::take, 32)
                        .store_uint(ctx::qryID, 64);

                send_raw_message(gas_message.end_cell(), 64);
            }
            set_stg();
            return ();

        } elseif ctx::opr == opr::provide_lp_ok {
            throw_unless(96, stg::flag_tokens);
            stg::lp_tokens_amount = in_msg_body~load_coins();
            stg::prov_flag_ask_lp = -1;
            chek_conds(ctx::qryID);
            set_stg();
            return ();

        } elseif ctx::opr == opr::swap_ok {
            throw_unless(97, stg::flag_tokens);
            stg::swapped_amount = in_msg_body~load_coins();
            stg::flag_swap = -1;
            chek_conds(ctx::qryID);
            set_stg();
            return ();

        } 
    }

    ;; messages from pool
    if equal_slices(ctx::send_addr, stg::pool_addr) { 
        if ctx::opr == opr::getter_expected_tokens {
            stg::onchain_info_lp = in_msg_body~load_coins();
            stg::flag_onchain_info = -1;
            chek_conds(ctx::qryID);
            set_stg();
            return ();

        }
    }

    ;; ;; messages from vault
    ;; if equal_slices(ctx::send_addr, stg::vault_addr) { 
    ;;     if ctx::opr == opr::ask_lp_ok {
    ;;         throw_unless(98, stg::flag_tokens);
    ;;         stg::asked_lp_amount = in_msg_body~load_coins();
    ;;         stg::flag_ask_lp = -1;
    ;;         chek_conds(ctx::qryID);
    ;;         set_stg();
    ;;         return ();
    ;;     }
    ;; }

    throw(err::incr_opr);
}
